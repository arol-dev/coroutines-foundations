/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example

import kotlinx.coroutines.CompletableDeferred
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.DelicateCoroutinesApi
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.GlobalScope
import kotlinx.coroutines.async
import kotlinx.coroutines.awaitAll
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import kotlin.coroutines.EmptyCoroutineContext

data class User(val username: String, val friends: List<User> = emptyList())

class App {
    suspend fun doLogin(username: String, password: String): User {
        // Server request
        return User(username)
    }

    suspend fun requestCurrentFriends(user: User): List<User> {
        // Server request
        return listOf(User("1"), User("2"))
    }

    suspend fun requestSuggestedFriends(user: User): List<User> {
        // Server request
        return listOf(User("3"), User("4"))
    }
}

@OptIn(DelicateCoroutinesApi::class)
fun main() {
    val app = App()

    val job = GlobalScope.launch(Dispatchers.Main) {
        val user = app.doLogin("username", "password")
        val friends = async { app.requestCurrentFriends(user) }
        val suggestedFriends = async { app.requestSuggestedFriends(user) }
        val friendAndSuggestedFriend = awaitAll(friends, suggestedFriends)
        val userWithFriendsAndSuggestedFriends =
            user.copy(friends = friendAndSuggestedFriend.flatten())
        println(userWithFriendsAndSuggestedFriends)
    }
    runBlocking {
        job.join()
    }
}
