/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example

import kotlinx.coroutines.*
import kotlinx.coroutines.channels.Channel
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.callbackFlow

data class User(val username: String, val friends: List<User> = emptyList())

class InMemoryDatabase {
    fun addUser(username: String, callback: (User) -> Unit) {
        callback(User(username, emptyList()))
    }
}

class App(private val inMemoryDatabase: InMemoryDatabase) {
    val usersFlow: Flow<User> = callbackFlow {
        var counter = 1
        while (true) {
            delay(500)
            inMemoryDatabase.addUser("user $counter", { user ->
                val channelResult = trySend(user)
                if (channelResult.isSuccess) {
                    println("Emitted: $user")
                }
                counter++
            })
        }
    }
}

@OptIn(DelicateCoroutinesApi::class)
fun main() {
    runBlocking {
        val inMemoryDatabase = InMemoryDatabase()
        val app = App(inMemoryDatabase)
        launch(Dispatchers.Default) {
            app.usersFlow.collect { user ->
                delay(500)
                println("Collected: $user")
            }
        }
    }
}
