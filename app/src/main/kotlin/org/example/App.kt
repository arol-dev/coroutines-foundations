/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example

import kotlinx.coroutines.*
import kotlinx.coroutines.channels.Channel

data class User(val username: String, val friends: List<User> = emptyList())

class InMemoryDatabase {
    val _userChannerl = Channel<User>(
        capacity = Channel.BUFFERED
    )

    suspend fun setCurrentUser(user: User) = _userChannerl.send(user)
}

class App(inMemoryDatabase: InMemoryDatabase) {
    suspend fun doLogin(username: String, password: String): User {
        // Server request
        return User(username)
    }

    suspend fun requestCurrentFriends(user: User): List<User> {
        // Server request
        return listOf(User("1"), User("2"))
    }

    suspend fun requestSuggestedFriends(user: User): List<User> {
        // Server request
        return listOf(User("3"), User("4"))
    }
}

@OptIn(DelicateCoroutinesApi::class)
fun main() {
    val inMemoryDatabase = InMemoryDatabase()
    val app = App(inMemoryDatabase)

    val coroutineScope = CoroutineScope(Dispatchers.Default + SupervisorJob())

    coroutineScope.launch {
        var counter = 1
        while (!inMemoryDatabase._userChannerl.isClosedForSend) {
            delay(500)
            val user = app.doLogin("user $counter", "password")
            inMemoryDatabase.setCurrentUser(user)
            println("Emitted: $user")
            inMemoryDatabase.setCurrentUser(user)
            println("Emitted: $user")
            counter++
            if (counter == 5) {
                inMemoryDatabase._userChannerl.close()
            }
        }
    }

    coroutineScope.launch {
        delay(1500)
        for (user in inMemoryDatabase._userChannerl) {
            delay(1000)
            println("Collected: $user")
        }
    }

    runBlocking {
        coroutineScope.coroutineContext.job.join()
    }
}
