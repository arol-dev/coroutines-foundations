/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example

import kotlinx.coroutines.*
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.MutableSharedFlow
import kotlinx.coroutines.flow.SharingStarted
import kotlinx.coroutines.flow.collect
import kotlinx.coroutines.flow.stateIn

data class User(val username: String, val friends: List<User> = emptyList())

class InMemoryDatabase {
    private val _userFlow = MutableSharedFlow<User>()
    val userFlow: Flow<User> = _userFlow

    suspend fun setCurrentUser(user: User) = _userFlow.emit(user)
}

class App(inMemoryDatabase: InMemoryDatabase) {
    val userStateFlow = inMemoryDatabase
        .userFlow
        .stateIn(CoroutineScope(Dispatchers.IO), SharingStarted.WhileSubscribed(5000), null)

    suspend fun doLogin(username: String, password: String): User {
        // Server request
        return User(username)
    }

    suspend fun requestCurrentFriends(user: User): List<User> {
        // Server request
        return listOf(User("1"), User("2"))
    }

    suspend fun requestSuggestedFriends(user: User): List<User> {
        // Server request
        return listOf(User("3"), User("4"))
    }
}

@OptIn(DelicateCoroutinesApi::class)
fun main() {
    val inMemoryDatabase = InMemoryDatabase()
    val app = App(inMemoryDatabase)

    val coroutineScope = CoroutineScope(Dispatchers.Default + SupervisorJob())

    coroutineScope.launch {
        app.userStateFlow.collect()
    }

    coroutineScope.launch {
        val currentUser = app.userStateFlow.value
        println("Current user: $currentUser")
    }

    coroutineScope.launch {
        val user1 = app.doLogin("user1", "password")
        inMemoryDatabase.setCurrentUser(user1)
        val user2 = app.doLogin("user2", "password")
        inMemoryDatabase.setCurrentUser(user2)
        val currentUser = app.userStateFlow.value
        println("Current user: $currentUser")
    }

    coroutineScope.launch {
        inMemoryDatabase.userFlow.collect { user ->
            println("User: $user")
        }
    }

    runBlocking {
        coroutineScope.coroutineContext.job.join()
    }
}
